plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
	id 'com.diffplug.spotless' version '6.25.0'
}

group = 'dev.lucasmattos'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

	implementation 'org.projectlombok:lombok:1.18.34'
	annotationProcessor 'org.projectlombok:lombok:1.18.34'

	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.liquibase:liquibase-core'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/CooperativeVoteApplication**',
					'**/infra**',
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 1.0
			}
		}
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/CooperativeVoteApplication**',
					'**/infra**',
			])
		}))
	}
}

spotless {
	format 'misc', {
		target '*.gradle', '*.md', '.gitignore'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}
	java {
		palantirJavaFormat()
		endWithNewline()
		removeUnusedImports()
		targetExclude("build/generated/**/*.java")
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

check.dependsOn spotlessCheck
check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
